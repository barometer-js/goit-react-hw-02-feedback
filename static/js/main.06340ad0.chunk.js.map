{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/Section/Section.module.scss","components/FeedbackOptions/FeedbackOptions.module.scss","components/Notification/Notification.module.scss"],"names":["Section","children","title","className","s","section","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","btn","type","onClick","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","addFeedback","e","setState","prevState","console","log","this","optionsKeys","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iRAgBeA,MAbf,YAAuC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC3B,OACE,0BAASC,UAAWC,IAAEC,QAAtB,UACGH,GAAS,oBAAIC,UAAWC,IAAEF,MAAjB,SAAyBA,IAClCD,MCcQK,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,6CAAcJ,KACd,gDAAiBC,KACjB,4CAAaC,KACb,8CAAeC,KACf,0DAA2BC,EAA3B,W,gBCiBWC,EAtBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBACEb,UAAWC,IAAEa,IACbC,KAAK,SAELC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAHIA,S,gBCCAI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGlB,UAAWC,IAAEiB,QAAhB,SAA0BA,KCE7BC,E,4MACJC,MAAQ,CACNhB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPe,mBAAqB,WACnB,MAA+B,EAAKD,MAEpC,OAFA,EAAQhB,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzBgB,gCAAkC,WAChC,IAAQlB,EAAS,EAAKgB,MAAdhB,KACR,OAAOmB,KAAKC,MAAOpB,EAAO,EAAKiB,qBAAwB,MAAQ,G,EAGjEI,YAAc,SAAAC,GACZ,OAAQA,GACN,IAAK,OACH,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAAExB,KAAMwB,EAAUxB,KAAO,MACrD,MACF,IAAK,UACH,EAAKuB,UAAS,SAAAC,GAAS,MAAK,CAAEvB,QAASuB,EAAUvB,QAAU,MAC3D,MACF,IAAK,MACH,EAAKsB,UAAS,SAAAC,GAAS,MAAK,CAAEtB,IAAKsB,EAAUtB,IAAM,MACnD,MACF,QACEuB,QAAQC,IAAI,+B,4CAIlB,WACE,MAA+BC,KAAKX,MAA5BhB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjB0B,EAAcC,OAAOC,KAAKH,KAAKX,OAErC,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAASrB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEW,QAASsB,EACTrB,gBAAiBoB,KAAKN,gBAG1B,cAAC,EAAD,CAAS1B,MAAM,aAAf,SACGgC,KAAKV,qBACJ,cAAC,EAAD,CACEjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOwB,KAAKV,qBACZb,mBAAoBuB,KAAKT,oCAG3B,cAAC,EAAD,CAAcJ,QAAQ,kC,GAxDhBiB,aAgEHhB,IC3DAiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,kBCA7DD,EAAOC,QAAU,CAAC,IAAM,+B,kBCAxBD,EAAOC,QAAU,CAAC,QAAU,iC","file":"static/js/main.06340ad0.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from './Section.module.scss';\n\nfunction Section({ children, title }) {\n  return (\n    <section className={s.section}>\n      {title && <h2 className={s.title}>{title}</h2>}\n      {children}\n    </section>\n  );\n}\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <ul>\n    <li>{`Good: ${good}`}</li>\n    <li>{`Neutral: ${neutral}`}</li>\n    <li>{`Bad: ${bad}`}</li>\n    <li>{`Total: ${total}`}</li>\n    <li>{`Positive feedback: ${positivePercentage}%`}</li>\n  </ul>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.scss';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {options.map(option => (\n        <button\n          className={s.btn}\n          type=\"button\"\n          key={option}\n          onClick={() => onLeaveFeedback(option)}\n        >\n          {option}\n        </button>\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Notification.module.scss';\n\nconst Notification = ({ message }) => {\n  return <p className={s.message}>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React, { Component, Fragment } from 'react';\nimport 'normalize.css';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return Math.round((good / this.countTotalFeedback()) * 100) || 0;\n  };\n\n  addFeedback = e => {\n    switch (e) {\n      case 'good':\n        this.setState(prevState => ({ good: prevState.good + 1 }));\n        break;\n      case 'neutral':\n        this.setState(prevState => ({ neutral: prevState.neutral + 1 }));\n        break;\n      case 'bad':\n        this.setState(prevState => ({ bad: prevState.bad + 1 }));\n        break;\n      default:\n        console.log('Invalid subscription type');\n    }\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const optionsKeys = Object.keys(this.state);\n\n    return (\n      <Fragment>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={optionsKeys}\n            onLeaveFeedback={this.addFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"There is no feedback\" />\n          )}\n        </Section>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2jwiJ\",\"title\":\"Section_title__kSpZX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__31H24\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__3nd2P\"};"],"sourceRoot":""}